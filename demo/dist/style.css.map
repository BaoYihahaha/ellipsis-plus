{"version":3,"sources":["webpack:///./demo/index.vue","webpack:///./demo/demo.vue","webpack:///./demo/pages/ellipsis.vue","webpack:///./demo/pages/ellipsisDemo.vue","webpack:///./src/ellipsis-plus.vue","webpack:///./src/ellipsis-plus-demo.vue"],"names":[],"mappings":";AAUA;AAEA;EACA;EACA;EACA;KAAA;MAAA;UAAA;EACA;CACA;AAEA;EACA;CACA;AAEA;EACA;EACA;EAAA;EAAA;EACA;EACA;EACA;CAKA;AAJA;EACA;EACA;CACA;;;;;;;;;;;;;;;;;;;ACdA;;GAEA;AACA;MACA;MACA;MACA;CAEA;AACA;IACA;CAgBA;AAfA;MACA;MACA;MACA;MACA;MACA;CASA;AAPA;MACA;CACA;AAEA;MACA;CACA;AAIA;MACA;MACA;MACA;MACA;MACA;CACA;AAEA;MACA;CACA;;ACKA;EACA;EACA;EACA;EACA;EACA;CAEA;AACA;EACA;EACA;EACA;EACA;UAAA;EACA;UAAA;CACA;AACA;EACA;EACA;EACA;EACA;EACA;CACA;AACA;EACA;EACA;CACA;AACA;EACA;CACA;;AC5BA;EACA;EACA;EACA;EACA;EACA;CAEA;AACA;EACA;EACA;EACA;EACA;UAAA;EACA;UAAA;CACA;AACA;EACA;EACA;EACA;EACA;EACA;CACA;AACA;EACA;EACA;CACA;AACA;EACA;CACA;;AC4DA;IACA;IACA;IACA;CAkBA;AAjBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACA;AACA;IACA;CACA;AACA;IACA;CACA;;ACMA;IACA;IACA;IACA;CAkBA;AAjBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACA;AACA;IACA;CACA;AACA;IACA;CACA","file":"style.css","sourcesContent":["<template>\n  <div>\n    <router-link class=\"page-back\"  :to=\"'/'\">\n      <i class=\"phoneui phoneui-back\"></i>\n    </router-link>\n\n    <router-view></router-view>\n  </div>\n</template>\n<style>\n  @reset-global mobile;\n\n  html, body {\n    background-color: #000;\n    -webkit-overflow-scrolling: touch;\n    user-select: none;\n    color: #FFF;\n  }\n\n  a {\n    color: inherit;\n  }\n\n  .page-back {\n    display: inline-block;\n    position: absolute 12px * * 10px;\n    width: 40px;\n    height: 40px;\n    text-align: center;\n    i {\n      font-size: 24px;\n      line-height: 40px;\n    }\n  }\n</style>\n\n<script type=\"text/babel\">\n\n  export default {\n    computed: {\n      visible() {\n        return true\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ./demo/index.vue?97005708","<template>\n  <section class=\"page-demo\">\n    <div v-for=\"group in navs\">\n      <div class=\"page-title\" v-text=\"group.title\"></div>\n      <router-link\n        v-for=\"item in group.list\" class=\"nav\"\n        :to=\"item.path\" :href=\"item.path\"\n        is-link>{{ item.name }}\n        <div slot=\"title\">\n          <i :class=\"['indexicon', 'icon-' + item.icon]\"></i>\n          <span>{{ item.name }}</span>\n        </div>\n      </router-link>\n    </div>\n  </section>\n</template>\n\n<style>\n/*\ntest\n */\n  .page-demo .nav{\n      display: inline-block;\n      margin-right: 10px;\n      margin-bottom: 15px;\n\n  }\n  .page-demo {\n    padding-bottom: 50px;\n    .indexicon {\n      font-size: 22px;\n      color: #26a2ff;\n      display: inline-block;\n      width: 30px;\n      vertical-align: middle;\n\n      &.icon-swipe {\n        font-size: 26px;\n      }\n\n      &.icon-checklist {\n        font-size: 18px;\n      }\n    }\n  }\n  @component-namespace page {\n    @component title {\n      font-size: 20px;\n      margin: 20px auto;\n      text-align: center;\n      display: block;\n      line-height: 1;\n    }\n\n    @component part {\n      margin-bottom: 15px;\n    }\n  }\n</style>\n\n<script type=\"text/babel\">\n  import { navs } from './route'\n\n  export default {\n    data() {\n      return {\n        navs: []\n      }\n    },\n\n    created() {\n      this.navs = navs\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ./demo/demo.vue?63f9f8f3","<template>\n  <div class=\"page-more\">\n    <div style = \"color:#FFF;font-size:14px;background-color:#000;\">\n      <h6>无按钮</h6>\n      <ellipsis-plus style=\"color:chartreuse\" ref=\"moreDemo\" :text=\"text\" :line=\"2\" :show-button=\"false\">\n      </ellipsis-plus>\n    </div>\n    <div>\n      <h6>采用组件默认按钮</h6>\n      <ellipsis-plus  ref=\"moreDemo\" :text=\"text\" :line=\"2\">\n      </ellipsis-plus>\n    </div>\n    <div>\n      <h6>自定义按钮文字</h6>\n      <ellipsis-plus ref=\"noButton\" expand-text='哈哈'   :text=\"text\" :line=\"2\">\n      </ellipsis-plus>\n    </div>\n    <div>\n      <h6>在组件外部定义按钮</h6>\n      <ellipsis-plus ref=\"noButton\"   :show-button=\"false\" :text=\"text\" :line=\"2\">\n      </ellipsis-plus>\n      <button class=\"outer-button\" @click=\"expand\">{{btnTxt}}</button>\n    </div>\n    <div>\n      <h6>自定义省略符</h6>\n      <ellipsis-plus  ref=\"moreDemo\" :ellipsis=\"'。。。'\" :text=\"text\" :line=\"2\">\n      </ellipsis-plus>\n    </div>\n    <div>\n      <h6>不带省略符</h6>\n      <ellipsis-plus  ref=\"moreDemo\" :ellipsis=\"''\" :text=\"text\" :line=\"2\">\n      </ellipsis-plus>\n    </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'ellipsis',\n    data() {\n      return {\n        text: '文本截断是我们前端经常会碰到的需求，有些字段文本比较长，设计师往往会在有限的空间内限制字符数量，以确保界面的美观性，设计师会在一些字符后面加上省略号来表示，这个时候我们前端往往就会使用',\n        btnTxt: '',\n        btnTxtExpand: '收起',\n        btnTxtCollapse: '展开全部'\n      }\n    },\n    created() {\n      this.btnTxt = this.btnTxtCollapse\n    },\n    methods: {\n      expand() {\n        this.$refs.noButton.handleClick()\n        this.btnTxt = this.$refs.noButton.show ? this.btnTxtExpand : this.btnTxtCollapse\n      }\n    }\n  }\n</script>\n\n<style>\n.page-more{\n  padding: 15px;\n  width: 375px;\n  margin: 0 auto;\n  font-family:Helvetica Neue,Microsoft Yahei,sans-serif;\n  background: #000\n\n}\n.page-more >div {\n  margin-bottom: 15px;\n  border:1px solid #26a2ff;\n  padding:15px;\n  border-radius: 4px;\n  box-shadow:0 0 5px #aaa\n}\nh6{\n  margin:0;\n  padding-bottom: 10px;\n  text-align: center;\n  font-size: 14px;\n  color: #FFF;\n}\n.ellipsis-plus {\n  font-size: 16px;\n  color: chartreuse\n}\n.outer-button{\n  margin-top: 10px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./demo/pages/ellipsis.vue?339a0f28","<template>\n  <div class=\"page-more\">\n    <div style = \"color:#FFF;font-size:14px;background-color:#000;\">\n      <h6>无按钮</h6>\n      <ellipsis-demo style=\"color:chartreuse\" ref=\"moreDemo\" :text=\"text\" :line=\"2\" :show-button=\"false\">\n      </ellipsis-demo>\n    </div>\n    <div>\n      <h6>采用组件默认按钮</h6>\n      <ellipsis-demo  ref=\"moreDemo\" :text=\"text\" :line=\"2\">\n      </ellipsis-demo>\n    </div>\n    <div>\n      <h6>自定义按钮文字</h6>\n      <ellipsis-demo ref=\"noButton\" expand-text='哈哈'   :text=\"text\" :line=\"2\">\n      </ellipsis-demo>\n    </div>\n    <div>\n      <h6>在组件外部定义按钮</h6>\n      <ellipsis-demo ref=\"noButton\"   :show-button=\"false\" :text=\"text\" :line=\"2\">\n      </ellipsis-demo>\n      <button class=\"outer-button\" @click=\"expand\">{{btnTxt}}</button>\n    </div>\n    <div>\n      <h6>自定义省略符</h6>\n      <ellipsis-demo  ref=\"moreDemo\" :ellipsis=\"'。。。'\" :text=\"text\" :line=\"2\">\n      </ellipsis-demo>\n    </div>\n    <div>\n      <h6>不带省略符</h6>\n      <ellipsis-demo  ref=\"moreDemo\" :ellipsis=\"''\" :text=\"text\" :line=\"2\">\n      </ellipsis-demo>\n    </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'ellipsis',\n    data() {\n      return {\n        text: '文本截断是我们前端经常会碰到的需求，有些字段文本比较长，设计师往往会在有限的空间内限制字符数量，以确保界面的美观性，设计师会在一些字符后面加上省略号来表示，这个时候我们前端往往就会使用',\n        btnTxt: '',\n        btnTxtExpand: '收起',\n        btnTxtCollapse: '展开全部'\n      }\n    },\n    created() {\n      this.btnTxt = this.btnTxtCollapse\n    },\n    methods: {\n      expand() {\n        this.$refs.noButton.handleClick()\n        this.btnTxt = this.$refs.noButton.show ? this.btnTxtExpand : this.btnTxtCollapse\n      }\n    }\n  }\n</script>\n\n<style>\n.page-more{\n  padding: 15px;\n  width: 375px;\n  margin: 0 auto;\n  font-family:Helvetica Neue,Microsoft Yahei,sans-serif;\n  background: #000\n\n}\n.page-more >div {\n  margin-bottom: 15px;\n  border:1px solid #26a2ff;\n  padding:15px;\n  border-radius: 4px;\n  box-shadow:0 0 5px #aaa\n}\nh6{\n  margin:0;\n  padding-bottom: 10px;\n  text-align: center;\n  font-size: 14px;\n  color: #FFF;\n}\n.ellipsis-plus {\n  font-size: 16px;\n  color: chartreuse\n}\n.outer-button{\n  margin-top: 10px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./demo/pages/ellipsisDemo.vue?80702e3a","<template>\n  <div class=\"ellipsis-plus\" ref=\"container\">\n    <span class=\"ellipsis-plus-txt\" ref=\"txt\">中</span><span class=\"ellipsis-plus-ellipsis\" ref=\"ellipsis\" :style=\"{'display':show?'none':'inline-block'}\">{{ ellipsis }}</span><button class=\"ellipsis-plus-button\" v-if=\"showButton\" :style=\"{ 'margin-left' : (show ? (marginLeft+'px'):collapseMarginLeft+'px')}\" ref=\"more\" @click=\"handleClick\">{{ show ? collapseText: expandText }}</button>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'ellipsis-plus',\n    props: {\n      text: String,\n      line: {\n        type: Number,\n        default: 2\n      },\n      ellipsis: {\n        type: String,\n        default: '...'\n      },\n      showButton: {\n        type: Boolean,\n        default: true\n      },\n      expandText: {\n        type: String,\n        default: '展开全部',\n        validator(value) {\n          return value && value.trim().length\n        }\n      },\n      collapseText: {\n        type: String,\n        default: '收起',\n        validator(value) {\n          return value && value.trim().length\n        }\n      }\n    },\n    data() {\n      return {\n        tmpTxt: '',\n        show: false,\n        marginLeft: 0,\n        collapseMarginLeft: 0\n      }\n    },\n    created() {\n\n    },\n    mounted() {\n      if (!this.line) {\n        return\n      }\n      let everywidth = this.$refs.txt.offsetWidth\n      let lineHeight = this.$refs.container.offsetHeight\n      this.$refs.txt.innerHTML = this.text\n      let containerWidth = this.$refs.container.offsetWidth\n      let btnWidth = 0\n      let btnWidthExpand = 0\n      let ellipsisWidth = this.$refs.ellipsis.offsetWidth\n      if (this.showButton) {\n        btnWidthExpand = btnWidth = Math.ceil(parseFloat(getComputedStyle(this.$refs.more, null)['width'].replace('px', '')))\n        this.$refs.ellipsis.style.display = 'none'\n        let left = 0\n        let btnClone = this.$refs.more.cloneNode()\n        if (this.expandText !== this.collapseText) {\n          this.$refs.more.style.display = 'none'\n          btnClone.innerHTML = this.collapseText\n          btnClone.style.display = 'inline-block'\n          this.$refs.container.appendChild(btnClone)\n          btnWidthExpand = Math.ceil(parseFloat(getComputedStyle(btnClone, null)['width'].replace('px', '')))\n          left = btnClone.offsetLeft\n        }\n        // 魔法数字 5\n        if (btnClone.offsetTop <= this.$refs.ellipsis.offsetTop + 5) {\n          this.marginLeft = (containerWidth - btnWidthExpand - left + ellipsisWidth)\n        } else {\n          this.marginLeft = containerWidth - btnWidthExpand - left\n        }\n        btnClone.remove()\n        this.$refs.more.style.display = 'inline-block'\n        this.$refs.ellipsis.style.display = 'inline-block'\n      }\n\n      let style = getComputedStyle(this.$refs.container, null)\n      // let lineHeight = parseFloat(style['lineHeight'].replace('px', ''))\n\n      this.$refs.txt.innerHTML = this.text\n      if (Math.floor(this.$refs.container.offsetHeight / lineHeight) <= this.line) {\n        this.tmpTxt = this.text\n        this.show = true\n        this.showButton = false\n        return\n      }\n      let initNum = Math.floor((containerWidth * this.line - btnWidth - ellipsisWidth) / everywidth)\n      let increase = 1\n      this.$refs.txt.innerHTML = this.text.substr(0, initNum)\n      if (Math.round(this.$refs.container.offsetHeight / lineHeight) > this.line) {\n        increase = -1\n      }\n      for (let i = initNum; i < this.text.length; (i = i + increase)) {\n        if (i < 0 || i > this.text.length) {\n          return\n        }\n         this.$refs.txt.innerHTML =  this.text.substr(0, i)\n        if (increase === 1 && Math.round(this.$refs.container.offsetHeight / lineHeight) > this.line) {\n           this.tmpTxt = this.text.substr(0, i - 1)\n           this.$refs.txt.innerHTML = this.tmpTxt\n           if (this.showButton) {\n             let left = this.$refs.more.offsetLeft\n             this.collapseMarginLeft = containerWidth - btnWidth - left - 1\n           }\n          break\n        } else if (increase === -1 && Math.round(this.$refs.container.offsetHeight / lineHeight) === this.line) {\n          this.tmpTxt = this.text.substr(0, i)\n          this.$refs.txt.innerHTML = this.tmpTxt\n          if (this.showButton) {\n            let left = this.$refs.more.offsetLeft\n            this.collapseMarginLeft = containerWidth - btnWidth - left - 1\n          }\n          break\n        }\n       }\n    },\n    methods: {\n      handleClick() {\n        if (this.show) {\n          this.collapse()\n        } else {\n          this.expand()\n        }\n      },\n      expand() {\n        if (!this.show) {\n          this.show = true\n          this.$refs.txt.innerHTML = this.text\n        }\n      },\n      collapse() {\n        if (this.show) {\n          this.show = false\n          this.$refs.txt.innerHTML = this.tmpTxt\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n@component-namespace ellipsis {\n  @component plus{\n    width:100%;\n    position: relative;\n    line-height: 1.5;\n    @descendent button {\n      padding-top:0;\n      padding-bottom:0;\n      border:0;\n      font-size: 1em;\n      vertical-align: middle;\n      color: #8590a6;\n      outline: none;\n      line-height: 1;\n      background-color: transparent\n    }\n    @descendent ellipsis{\n      display: inline-block\n    }\n    @descendent txt {\n      font-size: inherit;\n    }\n  }\n\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./src/ellipsis-plus.vue?7a7b2289","<template>\n  <div class=\"ellipsis-plus\" ref=\"container\">\n    <span class=\"ellipsis-plus-txt\" ref=\"txt\">中</span><span class=\"ellipsis-plus-ellipsis\" ref=\"ellipsis\" :style=\"{'display':show?'none':'inline-block'}\">{{ ellipsis }}</span><button class=\"ellipsis-plus-button\" v-if=\"showButton\" :style=\"{ 'margin-left' : (show ? (marginLeft+'px'):collapseMarginLeft+'px')}\" ref=\"more\" @click=\"handleClick\">{{ show ? collapseText: expandText }}</button>\n  </div>\n</template>\n<script>\n  export default {\n    name: 'ellipsis-demo',\n    props: {\n      text: String,\n      line: {\n        type: Number,\n        default: 2\n      },\n      ellipsis: {\n        type: String,\n        default: '...'\n      },\n      showButton: {\n        type: Boolean,\n        default: true\n      },\n      expandText: {\n        type: String,\n        default: '展开全部',\n        validator(value) {\n          return value && value.trim().length\n        }\n      },\n      collapseText: {\n        type: String,\n        default: '收起',\n        validator(value) {\n          return value && value.trim().length\n        }\n      }\n    },\n    data() {\n      return {\n        tmpTxt: '',\n        show: false,\n        marginLeft: 0,\n        collapseMarginLeft: 0\n      }\n    },\n    created() {\n\n    },\n    mounted() {\n      if (!this.line) {\n        return\n      }\n      let everywidth = this.$refs.txt.offsetWidth\n      let lineHeight = this.$refs.container.offsetHeight\n      this.$refs.txt.innerHTML = this.text\n      let containerWidth = this.$refs.container.offsetWidth\n      let btnWidth = 0\n      let btnWidthExpand = 0\n      let ellipsisWidth = this.$refs.ellipsis.offsetWidth\n      if (this.showButton) {\n        btnWidthExpand = btnWidth = Math.ceil(parseFloat(getComputedStyle(this.$refs.more, null)['width'].replace('px', '')))\n        this.$refs.ellipsis.style.display = 'none'\n        let left = 0\n        let btnClone = this.$refs.more.cloneNode()\n        if (this.expandText !== this.collapseText) {\n          this.$refs.more.style.display = 'none'\n          btnClone.innerHTML = this.collapseText\n          btnClone.style.display = 'inline-block'\n          this.$refs.container.appendChild(btnClone)\n          btnWidthExpand = Math.ceil(parseFloat(getComputedStyle(btnClone, null)['width'].replace('px', '')))\n          left = btnClone.offsetLeft\n        }\n        // 魔法数字 5\n        if (btnClone.offsetTop <= this.$refs.ellipsis.offsetTop + 5) {\n          this.marginLeft = (containerWidth - btnWidthExpand - left + ellipsisWidth)\n        } else {\n          this.marginLeft = containerWidth - btnWidthExpand - left\n        }\n        btnClone.remove()\n        this.$refs.more.style.display = 'inline-block'\n        this.$refs.ellipsis.style.display = 'inline-block'\n      }\n\n      let style = getComputedStyle(this.$refs.container, null)\n      // let lineHeight = parseFloat(style['lineHeight'].replace('px', ''))\n\n      this.$refs.txt.innerHTML = this.text\n      if (Math.floor(this.$refs.container.offsetHeight / lineHeight) <= this.line) {\n        this.tmpTxt = this.text\n        this.show = true\n        this.showButton = false\n        return\n      }\n      let initNum = Math.floor((containerWidth * this.line - btnWidth - ellipsisWidth) / everywidth)\n      let increase = 1\n      initNum = 1\n      this.$refs.txt.innerHTML = this.text.substr(0, initNum)\n\n      if (Math.round(this.$refs.container.offsetHeight / lineHeight) > this.line) {\n        increase = -1\n      }\n      let i\n      i = initNum\n      let ready = false\n      let timer = setInterval(() => {\n\n        if (i > this.text.length) {\n          clearInterval(timer)\n          return\n        }\n        i = i + increase\n\n        if (i < 0 || i > this.text.length) {\n          return\n        }\n         this.$refs.txt.innerHTML =  this.text.substr(0, i)\n        if (increase === 1 && Math.round(this.$refs.container.offsetHeight / lineHeight) > this.line) {\n          if (!ready) {\n            ready = true\n            // return\n          } else {\n            this.tmpTxt = this.text.substr(0, i - 2)\n            this.$refs.txt.innerHTML = this.tmpTxt\n            if (this.showButton) {\n              let left = this.$refs.more.offsetLeft\n              this.collapseMarginLeft = containerWidth - btnWidth - left - 1\n            }\n            clearInterval(timer)\n           return\n          }\n\n        } else if (increase === -1 && Math.round(this.$refs.container.offsetHeight / lineHeight) === this.line) {\n          if (!ready) {\n            ready = true\n            // return\n          } else {\n            this.tmpTxt = this.text.substr(0, i + 1)\n            this.$refs.txt.innerHTML = this.tmpTxt\n            if (this.showButton) {\n              let left = this.$refs.more.offsetLeft\n              this.collapseMarginLeft = containerWidth - btnWidth - left - 1\n            }\n            clearInterval(timer)\n            return\n          }\n\n        }\n      }, 300)\n    },\n    methods: {\n      handleClick() {\n        if (this.show) {\n          this.collapse()\n        } else {\n          this.expand()\n        }\n      },\n      expand() {\n        if (!this.show) {\n          this.show = true\n          this.$refs.txt.innerHTML = this.text\n        }\n      },\n      collapse() {\n        if (this.show) {\n          this.show = false\n          this.$refs.txt.innerHTML = this.tmpTxt\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n@component-namespace ellipsis {\n  @component plus{\n    width:100%;\n    position: relative;\n    line-height: 1.5;\n    @descendent button {\n      padding-top:0;\n      padding-bottom:0;\n      border:0;\n      font-size: 1em;\n      vertical-align: middle;\n      color: #8590a6;\n      outline: none;\n      line-height: 1;\n      background-color: transparent\n    }\n    @descendent ellipsis{\n      display: inline-block\n    }\n    @descendent txt {\n      font-size: inherit;\n    }\n  }\n\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./src/ellipsis-plus-demo.vue?3d256037"],"sourceRoot":""}